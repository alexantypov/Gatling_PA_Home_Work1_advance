package com.gatling.test

import scala.concurrent.duration._

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.jdbc.Predef._

class ChallengeFloodSimulation extends Simulation {

  val enviroment = System.getProperty("apiUrl")
  val ramp_users = Integer.getInteger("ramp_users")
  val ramp_duration = Integer.getInteger("ramp_duration")
  val duration = Integer.getInteger("duration")

  val httpProtocol = http
    .baseUrl("https://challenge.flood.io")
    .inferHtmlResources(BlackList(""".*\.js""", """.*\.css""", """.*\.gif""", """.*\.jpeg""", """.*\.jpg""", """.*\.ico""", """.*\.woff""", """.*\.woff2""", """.*\.(t|o)tf""", """.*\.png""", """.*detectportal\.firefox\.com.*"""), WhiteList())
  //    .acceptHeader("text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
  //    .acceptEncodingHeader("gzip, deflate")
  //    .acceptLanguageHeader("ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7")
  //    .userAgentHeader("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36")


  val scn = scenario("ChallengeFloodSimulation")
    .during(duration){
      exec(http("GET MainPage")
        .get("/")
        .check(status.is(200))
      )
        .pause(3)
        .exec(http("POST Start")
          .post("/start")
          .formParam("utf8", "✓")
          .formParam("authenticity_token", "EkvKtCCaYNthzZvEaI+wc5QzBi5AapInDA7IMHUU2+U=")
          .formParam("challenger[step_id]", "Z1hwMUphWDBTeS8rYXF5aHY2RlI4dz09LS02Y2FLYmZINlJ2dzJBdVZzOTdkbGtBPT0=--8da3599322ce0ee01fabb92fec2ef5ff9ae985aa")
          .formParam("challenger[step_number]", "1")
          .formParam("commit", "Start")
          .check(status.is(200)))
        .pause(3)
        .exec(http("POST AnswerAge")
          .post("/start")
          .formParam("utf8", "✓")
          .formParam("authenticity_token", "EkvKtCCaYNthzZvEaI+wc5QzBi5AapInDA7IMHUU2+U=")
          .formParam("challenger[step_id]", "dU1jd2hVSXlqV2VmNWUyQkJScDZEUT09LS1wQW5vSThTRC9jMUtEREo5OC80ZWNBPT0=--6304ab3d0cb60b5666bd5382bb0329ebc7db8113")
          .formParam("challenger[step_number]", "2")
          .formParam("challenger[age]", "43")
          .formParam("commit", "Next")
          .check(status.not(404), status.not(500)))
        .pause(3)
        .exec(http("POST AnswerData")
          .post("/start")
          .formParam("utf8", "✓")
          .formParam("authenticity_token", "EkvKtCCaYNthzZvEaI+wc5QzBi5AapInDA7IMHUU2+U=")
          .formParam("challenger[step_id]", "N2oxTzMvWVYvZXd1bFJaTHJqb0hzZz09LS1wdjZ1R0RXUGpZeVFUMFBxcVRiREtRPT0=--a539612f75d6450d8bad79a9f2ccdc80e2fe42ad")
          .formParam("challenger[step_number]", "3")
          .formParam("challenger[largest_order]", "235")
          .formParam("challenger[order_selected]", "cDlpZHNjdC9RMnRQRXNsYlFldkxhZz09LS1hYzNvVU1YSzN3a2pPQjZaWC9xenVnPT0=--ce6a124a3566ef5de4dc0594fcab6bbdca47557e")
          .formParam("commit", "Next")
          .check(status.not(404), status.not(500)))
        .pause(3)
        .exec(http("POST AnswerToken")
          .post("/start")
          .formParam("utf8", "✓")
          .formParam("authenticity_token", "EkvKtCCaYNthzZvEaI+wc5QzBi5AapInDA7IMHUU2+U=")
          .formParam("challenger[step_id]", "cUFpckNHSzJOQ3duN3hRNm5OM1RVZz09LS1OTFJLZkplUnJlWDAvMGZvczJXenRnPT0=--cb8018d004b68f5ad68cab4859d5de87e3904b36")
          .formParam("challenger[step_number]", "4")
          .formParam("challenger[order_3]", "1668855304")
          .formParam("challenger[order_5]", "1668855304")
          .formParam("challenger[order_11]", "1668855304")
          .formParam("challenger[order_6]", "1668855304")
          .formParam("challenger[order_7]", "1668855304")
          .formParam("challenger[order_14]", "1668855304")
          .formParam("challenger[order_10]", "1668855304")
          .formParam("challenger[order_7]", "1668855304")
          .formParam("challenger[order_13]", "1668855304")
          .formParam("challenger[order_15]", "1668855304")
          .formParam("commit", "Next")
          .check(status.not(404), status.not(500))
        )
        .pause(3)
        .exec(http("POST Finish")
          .post("/start")
          .formParam("utf8", "✓")
          .formParam("authenticity_token", "EkvKtCCaYNthzZvEaI+wc5QzBi5AapInDA7IMHUU2+U=")
          .formParam("challenger[step_id]", "M3dCaDBQcm1vV00reUJnU0J0V0pRZz09LS1waTJIcHdublZWbUpYVjVrb0FBNW53PT0=--5f7d53e64ccf1ebcde3d6dc0a9c236c7b39992e9")
          .formParam("challenger[step_number]", "5")
          .formParam("challenger[one_time_token]", "2901234568")
          .formParam("commit", "Next")
          .check(status.not(404), status.not(500))
        )
        .pause(3)
        .exec(http("GET HomePage")
          .get("/")
        )
    }

 setUp(scn.inject(rampUsers(ramp_users) during(10))).protocols(httpProtocol)
// setUp(scn.inject(atOnceUsers(1))).protocols(httpProtocol)
}